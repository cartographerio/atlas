package atlas

import cats.MonadError
import cats.syntax.all._
import shapeless.Lazy

trait InterpreterBoilerplate[F[_]] {
  self: Interpreter[F] =>

  trait NativeFunctions {
    [#def apply[[#T1#], R](func: ([#T1#]) => R)(
      implicit
      [#argDec1: ValueDecoder[F, T1]#,
      ],
      resEnc: ValueEncoder[F, R]
    ): Native[F] =
      Native {
        case [#v1# :: ] :: Nil =>
          for {
            [#v1 <- EvalStep.liftF(argDec1(v1))#
            ]
            res <- catchNonFatal(func([#v1#]))
          } yield resEnc(res)

        case args =>
          RuntimeError("Error running native function", None).raiseError[Step, Value[F]]
      }#

    ]

    [#def pure[[#T1#], R](func: ([#T1#]) => EvalStep[F, R])(
      implicit
      monad: MonadError[F, RuntimeError],
      [#argDec1: ValueDecoder[F, T1]#,
      ],
      resEnc: ValueEncoder[F, R]
    ): Native[F] =
      Native {
        case [#v1# :: ] :: Nil =>
          for {
            [#a1 <- EvalStep.liftF(argDec1(v1))#
            ]
            res <- func([#a1#])
          } yield resEnc(res)

        case args =>
          RuntimeError("Error running native function", None).raiseError[Step, Value[F]]
      }#

    ]
  }

  trait NativeEncoders {
    implicit def function0Encoder[R](
      implicit
      lazyResEnc: Lazy[ValueEncoder[F, R]]
    ): ValueEncoder[F, () => EvalStep[F, R]] = {
      val resEnc = lazyResEnc.value
      ValueEncoder.pure { func =>
        Native {
          case Nil =>
            for {
              res <- func()
            } yield resEnc(res)

          case args =>
            RuntimeError("Error running native function", None).raiseError[Step, Value[F]]
        }
      }
    }

    [#implicit def function1Encoder[[#T1#], R](
      implicit
      [#lazyArgDec1: Lazy[ValueDecoder[F, T1]]#,
      ],
      lazyResEnc: Lazy[ValueEncoder[F, R]]
    ): ValueEncoder[F, ([#T1#]) => EvalStep[F, R]] = {
      [#val argDec1 = lazyArgDec1.value#
      ]
      val resEnc = lazyResEnc.value
      ValueEncoder.pure { func =>
        Native {
          case [#v1# :: ] :: Nil =>
            for {
              [#a1 <- EvalStep.liftF(argDec1(v1))#
              ]
              res <- func([#a1#])
            } yield resEnc(res)

          case args =>
            RuntimeError("Error running native function", None).raiseError[Step, Value[F]]
        }
      }
    }#

    ]
  }

  trait NativeDecoders {
    implicit def function0Decoder[R](
      implicit
      lazyDec: Lazy[ValueDecoder[F, R]]
    ): ValueDecoder[F, () => EvalStep[F, R]] = {
      val dec = lazyDec.value
      ValueDecoder.pure {
        case closure: Closure[F] =>
          monad.pure { () =>
            for {
              res <- applyClosure(closure, Nil)
              ans <- EvalStep.liftF(dec(res))
            } yield ans
          }

        case native: Native[F] =>
          monad.pure { () =>
            for {
              res <- applyNative(native, Nil)
              ans <- EvalStep.liftF(dec(res))
            } yield ans
          }

        case value =>
          RuntimeError(s"Could not decode value as function: $value").raiseError
      }
    }

    [#implicit def function1Decoder[[#A1#], R](
      implicit
      [#lazyEnc1: Lazy[ValueEncoder[F, A1]]#],
      lazyDec: Lazy[ValueDecoder[F, R]]
    ): ValueDecoder[F, ([#A1#]) => EvalStep[F, R]] = {
      [#val enc1 = lazyEnc1.value#
      ]
      val dec = lazyDec.value
      ValueDecoder.pure {
        case closure: Closure[F] =>
          monad.pure { ([#arg1: A1#]) =>
            val args = List([#enc1(arg1)#])
            for {
              res <- applyClosure(closure, args)
              ans <- EvalStep.liftF(dec(res))
            } yield ans
          }

        case native: Native[F] =>
          monad.pure { ([#arg1: A1#]) =>
            val args = List([#enc1(arg1)#])
            for {
              res <- applyNative(native, args)
              ans <- EvalStep.liftF(dec(res))
            } yield ans
          }

        case value =>
          RuntimeError(s"Could not decode value as function: $value").raiseError
      }
    }#

    ]
  }
}
